{"ast":null,"code":"//change this to our abi\nimport CryptoZombiesContract from \"../contract_ABI/CryptoZombies.json\";\nimport store from \"../redux/store\"; //import blockchainInitialized from \"../redux/modules/czAppDuck\";  // for some unknown reason, the duck doesn't work!\n// so use this action type and creator instead\n\nexport const BLOCKCHAIN_INITIALIZED = \"BLOCKCHAIN_INITIALIZED\"; // action type\n// action creator (dispatch sends this to redux reducer)\n\nfunction blockchainInitialized(data) {\n  return {\n    type: BLOCKCHAIN_INITIALIZED,\n    payload: data\n  };\n} //\n//  set up the blockchain shadow contract, user address, and user zombie count.  Put into redux store.\n//\n\n\nasync function initBlockchain(web3) {\n  // Use web3 to get the user's accounts.\n  const accounts = await web3.eth.getAccounts();\n  const userAddress = accounts[0]; // Get contract instance\n  //change to our contract\n\n  const networkId = await web3.eth.net.getId();\n  const deployedNetwork = CryptoZombiesContract.networks[networkId];\n  const instance = new web3.eth.Contract(CryptoZombiesContract.abi, deployedNetwork && deployedNetwork.address); // put state data into the REDUX store for easy access from other pages and components\n  //change to our contract\n\n  let data = {\n    CZ: instance,\n    userAddress // shorthand\n\n  };\n  store.dispatch(blockchainInitialized(data));\n  return data;\n}\n\nexport default initBlockchain;","map":{"version":3,"sources":["/Users/josepheschen/Desktop/RinkebyRoullete/roulletedapp/src/utils/initBlockchain.js"],"names":["CryptoZombiesContract","store","BLOCKCHAIN_INITIALIZED","blockchainInitialized","data","type","payload","initBlockchain","web3","accounts","eth","getAccounts","userAddress","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","CZ","dispatch"],"mappings":"AAAA;AACA,OAAOA,qBAAP,MAAkC,oCAAlC;AACA,OAAOC,KAAP,MAAkB,gBAAlB,C,CAEA;AACA;;AAEA,OAAO,MAAMC,sBAAsB,GAAG,wBAA/B,C,CAAyD;AAEhE;;AACA,SAASC,qBAAT,CAA+BC,IAA/B,EAAqC;AACnC,SAAO;AACLC,IAAAA,IAAI,EAAEH,sBADD;AAELI,IAAAA,OAAO,EAAEF;AAFJ,GAAP;AAID,C,CAED;AACA;AACA;;;AAEA,eAAeG,cAAf,CAA8BC,IAA9B,EAAoC;AAClC;AACA,QAAMC,QAAQ,GAAG,MAAMD,IAAI,CAACE,GAAL,CAASC,WAAT,EAAvB;AACA,QAAMC,WAAW,GAAGH,QAAQ,CAAC,CAAD,CAA5B,CAHkC,CAKlC;AACA;;AACA,QAAMI,SAAS,GAAG,MAAML,IAAI,CAACE,GAAL,CAASI,GAAT,CAAaC,KAAb,EAAxB;AACA,QAAMC,eAAe,GAAGhB,qBAAqB,CAACiB,QAAtB,CAA+BJ,SAA/B,CAAxB;AACA,QAAMK,QAAQ,GAAG,IAAIV,IAAI,CAACE,GAAL,CAASS,QAAb,CACfnB,qBAAqB,CAACoB,GADP,EAEfJ,eAAe,IAAIA,eAAe,CAACK,OAFpB,CAAjB,CATkC,CAclC;AACF;;AACE,MAAIjB,IAAI,GAAG;AACTkB,IAAAA,EAAE,EAAEJ,QADK;AAETN,IAAAA,WAFS,CAEO;;AAFP,GAAX;AAKAX,EAAAA,KAAK,CAACsB,QAAN,CAAepB,qBAAqB,CAACC,IAAD,CAApC;AAEA,SAAOA,IAAP;AACD;;AAED,eAAeG,cAAf","sourcesContent":["//change this to our abi\r\nimport CryptoZombiesContract from \"../contract_ABI/CryptoZombies.json\";\r\nimport store from \"../redux/store\";\r\n\r\n//import blockchainInitialized from \"../redux/modules/czAppDuck\";  // for some unknown reason, the duck doesn't work!\r\n// so use this action type and creator instead\r\n\r\nexport const BLOCKCHAIN_INITIALIZED = \"BLOCKCHAIN_INITIALIZED\"; // action type\r\n\r\n// action creator (dispatch sends this to redux reducer)\r\nfunction blockchainInitialized(data) {\r\n  return {\r\n    type: BLOCKCHAIN_INITIALIZED,\r\n    payload: data\r\n  };\r\n}\r\n\r\n//\r\n//  set up the blockchain shadow contract, user address, and user zombie count.  Put into redux store.\r\n//\r\n\r\nasync function initBlockchain(web3) {\r\n  // Use web3 to get the user's accounts.\r\n  const accounts = await web3.eth.getAccounts();\r\n  const userAddress = accounts[0];\r\n\r\n  // Get contract instance\r\n  //change to our contract\r\n  const networkId = await web3.eth.net.getId();\r\n  const deployedNetwork = CryptoZombiesContract.networks[networkId];\r\n  const instance = new web3.eth.Contract(\r\n    CryptoZombiesContract.abi,\r\n    deployedNetwork && deployedNetwork.address\r\n  );\r\n\r\n  // put state data into the REDUX store for easy access from other pages and components\r\n//change to our contract\r\n  let data = {\r\n    CZ: instance,\r\n    userAddress,    // shorthand\r\n  };\r\n\r\n  store.dispatch(blockchainInitialized(data));\r\n\r\n  return data;\r\n}\r\n\r\nexport default initBlockchain;\r\n"]},"metadata":{},"sourceType":"module"}