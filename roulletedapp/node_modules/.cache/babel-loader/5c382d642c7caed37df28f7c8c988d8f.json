{"ast":null,"code":"//\n//      This is the REDUX \"duck\" format file.\n//\n//      This file contains all the constants, reducers, and action creators in one file\n//      rather than spread them out among multiple directories and files.\n//\n// Action Types\n// Types are listened for within the reducer switch whenever an action is fired off.\n// The action is sent to the reducer with a type, and when that type matches the type within the a case of the switch,\n// some sort of data manipulation is fired off.\n//\n// They are defined as all upper-case constants and may be exported if needed elsewhere.\nconst WEB3_INITIALIZED = \"WEB3_INITIALIZED\";\nconst BLOCKCHAIN_INITIALIZED = \"BLOCKCHAIN_INITIALIZED\";\nconst ZOMBIE_COUNT = \"ZOMBIE_COUNT\"; //  Actions and Action Creator Functions\n//\n// Actions are simple javascript objects that at least contain a type, and may also contain data that can be sent to the reducer.\n// When the user clicks on something that has an effect on the state of an app, an action creator sends an action to the reducer\n// where the data manipulation happens.\n//\n// An action typically looks like this:   { type: ADD_ITEM, item: 'Adding this item' }\n//\n// Action creators are the functions that create actions and send them to the reducer.\n// They usually return an action, sometimes can dispatch multiple actions (with the help of middleware like thunk),\n// or can begin asynchronous events like API calls.\n\nexport function web3Initialized(results) {\n  return {\n    type: WEB3_INITIALIZED,\n    payload: results\n  };\n}\nexport function blockchainInitialized(data) {\n  return {\n    type: BLOCKCHAIN_INITIALIZED,\n    payload: data\n  };\n} //\n//  define the initial state for the store\n//\n\nconst initialState = {\n  web3Instance: null,\n  CZ: {},\n  // contract instance with methods, etc.\n  userAddress: \"\",\n  userZombieCount: 0,\n  totalZombieCount: 0\n}; // Reducers\n//\n// The reducer is typically the only thing that touches the store.\n// It only deals within a particular part of the store, initialized as initialState.\n// It's a pure switch statement that does not directly change the state because state is immutable.\n// That means you cannot use a method like .pop or .push that manipulates the array it's called on.\n// Instead we create a now store from the old store and any information we want to put in to it.\n// All reducers have a default case that just returns state.\n//\n// In this case, note that it is the default export.\n\nexport default function reducer(state = initialState, action) {\n  console.log(\"reducer\", action);\n\n  switch (action.type) {\n    case WEB3_INITIALIZED:\n      console.log(\"Web3 is initializing\", action.payload.results);\n      return Object.assign({}, state, {\n        web3Instance: action.payload.web3Instance\n      });\n\n    case BLOCKCHAIN_INITIALIZED:\n      return Object.assign({}, state, {\n        CZ: action.payload.CZ,\n        userAddress: action.payload.userAddress,\n        userZombieCount: action.payload.userZombieCount\n      });\n\n    case ZOMBIE_COUNT:\n      return Object.assign({}, state, {\n        totalZombieCount: action.payload.totalZombieCount,\n        userZombieCount: action.payload.userZombieCount\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/josepheschen/Desktop/RinkebyRoullete/roulletedapp/src/redux/modules/czAppDuck.js"],"names":["WEB3_INITIALIZED","BLOCKCHAIN_INITIALIZED","ZOMBIE_COUNT","web3Initialized","results","type","payload","blockchainInitialized","data","initialState","web3Instance","CZ","userAddress","userZombieCount","totalZombieCount","reducer","state","action","console","log","Object","assign"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA,MAAMA,gBAAgB,GAAG,kBAAzB;AACA,MAAMC,sBAAsB,GAAG,wBAA/B;AACA,MAAMC,YAAY,GAAG,cAArB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,eAAT,CAAyBC,OAAzB,EAAkC;AACvC,SAAO;AACLC,IAAAA,IAAI,EAAEL,gBADD;AAELM,IAAAA,OAAO,EAAEF;AAFJ,GAAP;AAID;AAED,OAAO,SAASG,qBAAT,CAA+BC,IAA/B,EAAqC;AAC1C,SAAO;AACLH,IAAAA,IAAI,EAAEJ,sBADD;AAELK,IAAAA,OAAO,EAAEE;AAFJ,GAAP;AAID,C,CAED;AACA;AACA;;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,YAAY,EAAE,IADK;AAEnBC,EAAAA,EAAE,EAAE,EAFe;AAEX;AACRC,EAAAA,WAAW,EAAE,EAHM;AAInBC,EAAAA,eAAe,EAAE,CAJE;AAKnBC,EAAAA,gBAAgB,EAAE;AALC,CAArB,C,CAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,OAAT,CAAiBC,KAAK,GAAGP,YAAzB,EAAuCQ,MAAvC,EAA+C;AAC5DC,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,MAAvB;;AACA,UAAQA,MAAM,CAACZ,IAAf;AAEE,SAAKL,gBAAL;AACEkB,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCF,MAAM,CAACX,OAAP,CAAeF,OAAnD;AACA,aAAOgB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,KAAlB,EAAyB;AAC9BN,QAAAA,YAAY,EAAEO,MAAM,CAACX,OAAP,CAAeI;AADC,OAAzB,CAAP;;AAIF,SAAKT,sBAAL;AACE,aAAOmB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,KAAlB,EAAyB;AAC9BL,QAAAA,EAAE,EAAEM,MAAM,CAACX,OAAP,CAAeK,EADW;AAE9BC,QAAAA,WAAW,EAAEK,MAAM,CAACX,OAAP,CAAeM,WAFE;AAG9BC,QAAAA,eAAe,EAAEI,MAAM,CAACX,OAAP,CAAeO;AAHF,OAAzB,CAAP;;AAMF,SAAKX,YAAL;AACE,aAAOkB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,KAAlB,EAAyB;AAC9BF,QAAAA,gBAAgB,EAAEG,MAAM,CAACX,OAAP,CAAeQ,gBADH;AAE9BD,QAAAA,eAAe,EAAEI,MAAM,CAACX,OAAP,CAAeO;AAFF,OAAzB,CAAP;;AAKF;AACE,aAAOG,KAAP;AAtBJ;AAwBD","sourcesContent":["//\r\n//      This is the REDUX \"duck\" format file.\r\n//\r\n//      This file contains all the constants, reducers, and action creators in one file\r\n//      rather than spread them out among multiple directories and files.\r\n//\r\n\r\n// Action Types\r\n\r\n// Types are listened for within the reducer switch whenever an action is fired off.\r\n// The action is sent to the reducer with a type, and when that type matches the type within the a case of the switch,\r\n// some sort of data manipulation is fired off.\r\n//\r\n// They are defined as all upper-case constants and may be exported if needed elsewhere.\r\n\r\nconst WEB3_INITIALIZED = \"WEB3_INITIALIZED\";\r\nconst BLOCKCHAIN_INITIALIZED = \"BLOCKCHAIN_INITIALIZED\";\r\nconst ZOMBIE_COUNT = \"ZOMBIE_COUNT\";\r\n\r\n//  Actions and Action Creator Functions\r\n//\r\n// Actions are simple javascript objects that at least contain a type, and may also contain data that can be sent to the reducer.\r\n// When the user clicks on something that has an effect on the state of an app, an action creator sends an action to the reducer\r\n// where the data manipulation happens.\r\n//\r\n// An action typically looks like this:   { type: ADD_ITEM, item: 'Adding this item' }\r\n//\r\n// Action creators are the functions that create actions and send them to the reducer.\r\n// They usually return an action, sometimes can dispatch multiple actions (with the help of middleware like thunk),\r\n// or can begin asynchronous events like API calls.\r\n\r\nexport function web3Initialized(results) {\r\n  return {\r\n    type: WEB3_INITIALIZED,\r\n    payload: results\r\n  };\r\n}\r\n\r\nexport function blockchainInitialized(data) {\r\n  return {\r\n    type: BLOCKCHAIN_INITIALIZED,\r\n    payload: data\r\n  };\r\n}\r\n\r\n//\r\n//  define the initial state for the store\r\n//\r\n\r\nconst initialState = {\r\n  web3Instance: null,\r\n  CZ: {}, // contract instance with methods, etc.\r\n  userAddress: \"\",\r\n  userZombieCount: 0,\r\n  totalZombieCount: 0\r\n};\r\n\r\n// Reducers\r\n//\r\n// The reducer is typically the only thing that touches the store.\r\n// It only deals within a particular part of the store, initialized as initialState.\r\n// It's a pure switch statement that does not directly change the state because state is immutable.\r\n// That means you cannot use a method like .pop or .push that manipulates the array it's called on.\r\n// Instead we create a now store from the old store and any information we want to put in to it.\r\n// All reducers have a default case that just returns state.\r\n//\r\n// In this case, note that it is the default export.\r\n\r\nexport default function reducer(state = initialState, action) {\r\n  console.log(\"reducer\", action);\r\n  switch (action.type) {\r\n\r\n    case WEB3_INITIALIZED:\r\n      console.log(\"Web3 is initializing\", action.payload.results);\r\n      return Object.assign({}, state, {\r\n        web3Instance: action.payload.web3Instance\r\n      });\r\n\r\n    case BLOCKCHAIN_INITIALIZED:\r\n      return Object.assign({}, state, {\r\n        CZ: action.payload.CZ,\r\n        userAddress: action.payload.userAddress,\r\n        userZombieCount: action.payload.userZombieCount\r\n      });\r\n\r\n    case ZOMBIE_COUNT:\r\n      return Object.assign({}, state, {\r\n        totalZombieCount: action.payload.totalZombieCount,\r\n        userZombieCount: action.payload.userZombieCount\r\n      });\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}